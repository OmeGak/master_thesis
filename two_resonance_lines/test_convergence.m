function test_convergence(range_max,make_save_convergence,close_all)
    % determine convergence behaviour
    % [act directly on multiple_lines.m]
    
    if close_all == 1
        close all
    end

    % set basic parameters
    [make_save,nphot,alpha,beta,nbins,nrbins,possibility_scattering,resonance_x,resonance_tau,multiple_scatterings,...
        all_radial,radial_release,Eddington_limb_darkening,isotropic_scattering,...
        plot_only_scattering,random_number,make_display,track_path,number_paths,...
        compare_Fortran,deterministic_sampling_x,xstart_Fortran,make_plot] ...
        = get_default_params()
    
    resonance_tau = 100;
    
    % reference solution
    K = range_max + 1;
    nphot = 10^K;
    [freq_ref,flux_ref,total_number_scatterings,photon_path,yes,luminosity,rmax,total_number_backscatterings,...
    dLdr,g_radiation,scattering_x]...
        = multiple_lines(nphot,alpha,beta,...
        make_plot,resonance_x,resonance_tau,make_save,nbins,nrbins,...
        possibility_scattering,multiple_scatterings,all_radial,radial_release,isotropic_scattering,...
        Eddington_limb_darkening,plot_only_scattering,random_number,...
        track_path,number_paths,make_save,compare_Fortran,...
        deterministic_sampling_x,xstart_Fortran); 

    variance_collection = zeros(1,range_max-1);
    for k=2:range_max
        nphot = 10^k;
        [freq,flux,total_number_scatterings,photon_path,yes,luminosity,rmax,total_number_backscatterings,...
        dLdr,g_radiation,scattering_x]...
            = multiple_lines(nphot,alpha,beta,...
            make_plot,resonance_x,resonance_tau,make_save,nbins,nrbins,...
            possibility_scattering,multiple_scatterings,all_radial,radial_release,isotropic_scattering,...
            Eddington_limb_darkening,plot_only_scattering,random_number,...
            track_path,number_paths,make_save,compare_Fortran,...
            deterministic_sampling_x,xstart_Fortran); 
        variance = sum((flux-flux_ref).^2);
        variance_collection(k-1) = variance;
    end
    variance_collection = sqrt(variance_collection)/nphot;
    
%     close all
    figure()
    loglog(10.^(2:range_max),variance_collection,'.--','MarkerSize',20)
    nphot_array = 10.^(2:range_max);
    hold on, loglog(nphot_array,variance_collection(1)/((nphot_array(1))^(-1/2))*nphot_array.^(-1/2),'-','MarkerSize',20)
    
    if make_save_convergence == 1
        saveas(gcf,'figures/convergence_one_line.png')
    end
end